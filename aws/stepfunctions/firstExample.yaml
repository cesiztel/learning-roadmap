AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a Lambda state machine."
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  MyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
             callback(null, "Hello, " + event.user.name + "!. Thanks for buying in our shops." +
              "Your total invoice amount is " + event.order.total + " euros. Enjoy!");
          };
      Runtime: "nodejs12.x"
      Timeout: "25"

  UserDataFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            let user = {
              id: event.userId,
              name: "John"
            };

            callback(null, { 
              data: {
                user: user,
                oderId: event.orderId
              }
            });
          };
      Runtime: "nodejs12.x"
      Timeout: "25"
  
  OrderDataFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            let user = event.user;
            let order = {
              id: event.orderId,
              products: [ 
                { id: 2222, name: "almond milk", quantity: 2, price: 20 },
                { id: 2223, name: "broccoli", quantity: 1, price: 1 },
                { id: 2224, name: "tomatoes", quantity: 5, price: 5 }
              ],
              total: 26
            };

            callback(null, { 
              data: {
                user: user,
                order: order
              }
            });
          };
      Runtime: "nodejs12.x"
      Timeout: "25"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example of the Amazon States Language using an AWS Lambda function",
              "StartAt": "AddUser",
              "States": {
                "AddUser": {
                  "Type": "Task",
                  "Resource": "${userLambdaArn}",
                  "OutputPath": "$.data",
                  "Next": "AddOrder"
                },
                "AddOrder": {
                  "Type": "Task",
                  "Resource": "${orderLambdaArn}",
                  "OutputPath": "$.data",
                  "Next": "HelloWorld"
                },
                "HelloWorld": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt [ MyLambdaFunction, Arn ], userLambdaArn: !GetAtt [ UserDataFunction, Arn ], orderLambdaArn: !GetAtt [ OrderDataFunction, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]